과제 4번

노드1 (송신)

// CAN2: DHT 센서 데이터를 읽어 CAN을 통해 전송하는 코드
#include <df_can.h>
#include <SPI.h>
#include "DHT.h"
#define DHTPIN 3
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);  
const int SPI_CS_PIN = 10;  
MCPCAN CAN(SPI_CS_PIN);

void setup() {
  Serial.begin(9600);
  dht.begin();  
  CAN.init();     
  if(CAN_OK == CAN.begin(CAN_500KBPS)) {
    Serial.println("CAN BUS Shield init ok!");
  } else {
    Serial.println("CAN BUS Shield init failed");
  }
}

void loop() {
  float temp = dht.readTemperature();
  float humi = dht.readHumidity();  

  if (isnan(temp) || isnan(humi)) {
    Serial.println("Failed to read from DHT sensor.");
    return;
  }

  unsigned char data[8] = {0};
  data[0] = (unsigned char)temp;
  data[1] = (unsigned char)humi;

  CAN.sendMsgBuf(0x02, 0, 8, data);
  delay(500);
  CAN.sendMsgBuf(0x03, 0, 8, data);
  delay(500);
  CAN.sendMsgBuf(0x04, 0, 8, data); // ID 0x01로 데이터 전송
  delay(1000); // 1초마다 데이터 전송
}

노드2
// CAN1: CAN을 통해 받은 데이터를 처리하는 코드
#include <df_can.h>
#include <SPI.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>

const int SPI_CS_PIN = 10;
MCPCAN CAN(SPI_CS_PIN);
LiquidCrystal_I2C lcd(0x27, 16, 2);

const int red = 5;
const int yellow = 6;
const int green = 7;

void setup() {
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();

  pinMode(red, OUTPUT);
  pinMode(yellow, OUTPUT);
  pinMode(green, OUTPUT);

  CAN.init();
  if (CAN_OK == CAN.begin(CAN_500KBPS)) {
    Serial.println("CAN BUS Shield init ok!");
  } else {
    Serial.println("CAN BUS Shield init failed");
  }
}

void loop() {
  unsigned char len = 0;
  unsigned char buf[8];

  if (CAN_MSGAVAIL == CAN.checkReceive()) {
    CAN.readMsgBuf(&len, buf);
    unsigned int id = CAN.getCanId();

    if (id == 0x02) { // 데이터 수신 ID 확인
      float temperature = buf[0];
      float humidity = buf[1];

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Temp: ");
      lcd.print(temperature);
      lcd.print(" C");
      lcd.setCursor(0, 1);
      lcd.print("Hum : ");
      lcd.print(humidity);
      lcd.print(" %");

      // 습도에 따라 LED 상태 변경
      if (humidity <= 50) {
        digitalWrite(green, HIGH);
        digitalWrite(yellow, LOW);
        digitalWrite(red, LOW);
      } else if (humidity <= 75) {
        digitalWrite(green, LOW);
        digitalWrite(yellow, HIGH);
        digitalWrite(red, LOW);
      } else {
        digitalWrite(green, LOW);
        digitalWrite(yellow, LOW);
        digitalWrite(red, HIGH);
      }
      Serial.print("Received Temp: ");
      Serial.print(temperature);
      Serial.print(" C, Hum: ");
      Serial.print(humidity);
      Serial.println(" %");
      Serial.print(temperature);
      Serial.print(" ");
      Serial.println(humidity);
    }
  }
  delay(1000); // 필요시 지연시간 조정
}

노드3
#include <df_can.h>
#include <SPI.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>
 
const int SPI_CS_PIN = 10;  
MCPCAN CAN(SPI_CS_PIN);
LiquidCrystal_I2C lcd(0x27,16,2);

void setup()
{
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  CAN.init();
  if(CAN_OK == CAN.begin(CAN_500KBPS))
  {
    Serial.println("CAN BUS Shield init OK!");
  }
  else
  {
    Serial.println("CAN BUS Shield init failed");
  }
}
/*
void MCP2515_ISR()
{
  len = 0;
  for (int i=0; i<8; i++)
    {  
      buf[i] = 0;
    }
  while (CAN_MSGAVAIL == CAN.checkReceive()) 
  {
    CAN.readMsgBuf(&len, buf);
    id = CAN.getCanId();
      
     if (id == 0x03)
    {
      Serial.print("ID : ");  Serial.println(id);
      Serial.print("Temperature : ");
      Serial.print(buf[0]);  Serial.println("°C");
      Serial.print("Humidity : ");
      Serial.print(buf[1]); Serial.println("%\n");

      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Temp: ");
      lcd.print(buf[0]);
      lcd.print(" C");
      lcd.setCursor(0,1);
      lcd.print("Hum :");
      lcd.print(buf[1]);
      lcd.print("%");
    }
    }
  }
*/
  void loop()
{  
    unsigned char len =0;
    unsigned char buf[8];

    if (CAN_MSGAVAIL == CAN.checkReceive()) 
    {
    CAN.readMsgBuf(&len, buf);
    unsigned int id = CAN.getCanId();
      
    if (id == 0x03)
    {

      float temperature = buf[0];
      float humidity = buf[1];
      
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Temp: ");
      lcd.print(temperature);
      lcd.print(" C");
      lcd.setCursor(0,1);
      lcd.print("Hum : ");
      lcd.print(humidity);
      lcd.print(" %");
    }
    }
  //CAN.sendMsgBuf(0x01, 0, 8, buf);
  delay(1000);
}


노드4
#include <SPI.h>
#include <df_can.h>
#include <Servo.h>

// CAN 모듈 핀 설정
const int SPI_CS_PIN = 10;
MCPCAN CAN(SPI_CS_PIN);

// 서보 모터 설정
Servo myServo;  
const int servoPin = 9; // 서보 모터를 연결할 핀 번호

void setup() {
  Serial.begin(9600);
  CAN.init();
  if (CAN_OK == CAN.begin(CAN_500KBPS)) {
    Serial.println("CAN BUS Shield init ok!");
  } else {
    Serial.println("CAN BUS Shield init failed");
  }

  myServo.attach(servoPin); // 서보 모터 핀 설정
}

void loop() {
  unsigned char len = 0;
  unsigned char buf[8];

  if (CAN_MSGAVAIL == CAN.checkReceive()) { // 메시지가 도착했는지 확인
    CAN.readMsgBuf(&len, buf);              // 메시지 읽기
    unsigned int id = CAN.getCanId();

    if (id == 0x04) { // 온습도 데이터 수신 ID 확인
      float temperature = buf[0]; // 온도
      float humidity = buf[1];    // 습도

      // 온도가 25도 이상이고 습도가 60% 이상일 경우
      if (temperature >= 25 || humidity >= 60) {
        myServo.write(180); // 서보 모터를 90도로 회전
      } else {
        myServo.write(0); // 그렇지 않으면 서보 모터를 0도로 회전
      }
    }
  }
  delay(1000); // 1초마다 검사
}

노드5, 노드6 -> 실험 2와 동일 